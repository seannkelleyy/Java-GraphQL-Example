type Query {
	#users
	userById(id: ID): User
	allUsers: [User]

	#goals
	goalById(id: ID): Goal
	goalsByUserId(userId: ID): [Goal]

	#budgets
	budgetById(id: ID): Budget
	budgetsByUserId(userId: ID): [Budget]

	#incomes
	incomeById(id: ID): Income
	incomesByBudgetId(budgetId: ID): [Income]
	incomesByUserId(userId: ID): [Income]

	#expenses
	expenseById(id: ID): Expense
	expensesByBudgetId(budgetId: ID): [Expense]
	expensesByUserId(userId: ID): [Expense]
}

type Mutation {
	#users
	createUser(firstName: String!, lastName: String!): User
	updateUser(id: ID!, firstName: String, lastName: String): User
	deleteUser(id: ID!): User

	#goals
	createGoal(goal: String!, isCompleted: Boolean, userId: ID!): Goal
	updateGoal(id: ID!, goal: String, isCompleted: Boolean, userId: ID!): Goal
	deleteGoal(id: ID!): Goal

	#budgets
	createBudget(year: Int!, month: Int!, income: Float, expenses: Float, userId: ID!): Budget
	updateBudget(id: ID!, year: Int, month: Int, income: Float, expenses: Float, userId: ID!): Budget
	deleteBudget(id: ID!): Budget
}

type User {
	id: ID
	firstName: String
	lastName: String
}

type Goal {
	id: ID
	goal: String
	isCompleted: Boolean
	user: User
}

type Budget {
	id: ID
	year: Int
	month: Int
	income: Float
	expenses: Float
	user: User
}

type Income {
	id: ID
	name: String
	amount: Float
	budget: Budget
	user: User
}

type Expense {
	id: ID
	name: String
	amount: Float
	budget: Budget
	user: User
}

