type Query {
	goalById(id: ID): Goal
	goalsByUserId(userId: ID): [Goal]
	budgetById(id: ID): Budget
	budgetsByUserId(userId: ID): [Budget]
	incomesByBudgetId(budgetId: ID): [Income]
	incomeById(id: ID): Income
	incomesByUserId(userId: ID): [Income]
	userById(id: ID): User
	allUsers: [User]
	expenseById(id: ID): Expense
	expensesByBudgetId(budgetId: ID): [Expense]
	expensesByUserId(userId: ID): [Expense]
}

type Mutation {
	createUser(firstName: String!, lastName: String!): User
	updateUser(id: ID!, firstName: String, lastName: String): User
	deleteUser(id: ID!): User
}

type User {
	id: ID
	firstName: String
	lastName: String
}

type Goal {
	id: ID
	goal: String
	isCompleted: Boolean
	user: User
}

type Budget {
	id: ID
	year: Int
	month: Int
	income: Float
	expenses: Float
	user: User
}

type Income {
	id: ID
	name: String
	amount: Float
	budget: Budget
	user: User
}

type Expense {
	id: ID
	name: String
	amount: Float
	budget: Budget
	user: User
}

